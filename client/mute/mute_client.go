// Code generated by go-swagger; DO NOT EDIT.

package mute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new mute API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mute API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateInstance create instance API
*/
func (a *Client) CreateInstance(params *CreateInstanceParams) (*CreateInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createInstance",
		Method:             "POST",
		PathPattern:        "/app/rest/mutes",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateInstanceOK), nil

}

/*
CreateInstances create instances API
*/
func (a *Client) CreateInstances(params *CreateInstancesParams) (*CreateInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createInstances",
		Method:             "POST",
		PathPattern:        "/app/rest/mutes/multiple",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateInstancesOK), nil

}

/*
DeleteInstance delete instance API
*/
func (a *Client) DeleteInstance(params *DeleteInstanceParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstanceParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstance",
		Method:             "DELETE",
		PathPattern:        "/app/rest/mutes/{muteLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetMutes get mutes API
*/
func (a *Client) GetMutes(params *GetMutesParams) (*GetMutesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMutesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMutes",
		Method:             "GET",
		PathPattern:        "/app/rest/mutes",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMutesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMutesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
